<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- Sample RDBMS data source that would exist in any application - not Shiro related. -->
    <!--<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">-->
    <!--<property name="driverClassName" value="org.hsqldb.jdbcDriver"/>-->
    <!--<property name="url" value="jdbc:hsqldb:mem:shiro-spring"/>-->
    <!--<property name="username" value="sa"/>-->
    <!--</bean>-->
    <!-- Populates the sample database with sample users and roles. -->
    <!--<bean id="bootstrapDataPopulator" class="org.apache.shiro.samples.spring.BootstrapDataPopulator">-->
    <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!-- Simulated business-tier "Manager", not Shiro related, just an example -->
    <!--<bean id="sampleManager" class="org.apache.shiro.samples.spring.DefaultSampleManager"/>-->

    <!-- =========================================================
         Shiro Core Components - Not Spring Specific
         ========================================================= -->
    <!-- Shiro's main business-tier object for web-enabled applications
         (use DefaultSecurityManager instead when there is no web environment)-->
    <!--配置securityManager-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="cacheManager" ref="cacheManager"/>
        <!-- Single realm app.  If you have multiple realms, use the 'realms' property instead. -->
        <!--<property name="sessionMode" value="native"/>-->
        <!--<property name="realm" ref="jdbcRealm"/>-->
        <property name="authenticator" ref="authenticator"/>
        <property name="realms">
            <list>
                <ref bean="jdbcRealm"/>
                <ref bean="secondRealm"/>
            </list>
        </property>
    </bean>

    <!-- Let's use some enterprise caching support for better performance.  You can replace this with any enterprise
         caching framework implementation that you like (Terracotta+Ehcache, Coherence, GigaSpaces, etc -->
    <!--配置cacheManager-->
    <!--需要加入ehCache的包-->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <!-- Set a net.sf.ehcache.CacheManager instance here if you already have one.  If not, a new one
             will be creaed with a default config:-->
        <!--<property name="cacheManager" ref="ehCacheManager"/>-->
        <!-- If you don't have a pre-built net.sf.ehcache.CacheManager instance to inject, but you want
             a specific Ehcache configuration to be used, specify that here.  If you don't, a default
             will be used.:-->
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- Used by the SecurityManager to access security data (users, roles, etc).
         Many other realm implementations can be used too (PropertiesRealm,
         LdapRealm, etc. -->
    <!--<bean id="jdbcRealm" class="org.apache.shiro.samples.spring.realm.SaltAwareJdbcRealm">-->
    <!--<property name="name" value="jdbcRealm"/>-->
    <!--<property name="dataSource" ref="dataSource"/>-->
    <!--<property name="credentialsMatcher">-->
    <!--&lt;!&ndash; The 'bootstrapDataPopulator' Sha256 hashes the password-->
    <!--(using the username as the salt) then base64 encodes it: &ndash;&gt;-->
    <!--<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">-->
    <!--<property name="hashAlgorithmName" value="SHA-256"/>-->
    <!--&lt;!&ndash; true means hex encoded, false means base64 encoded &ndash;&gt;-->
    <!--<property name="storedCredentialsHexEncoded" value="false"/>-->
    <!--</bean>-->
    <!--</property>-->
    <bean name="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
        <!--<property name="realms">-->
            <!--<list>-->
                <!--<ref bean="jdbcRealm"/>-->
                <!--<ref bean="secondRealm"/>-->
            <!--</list>-->
        <!--</property>-->
        <!--配置认证策略-->
        <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
        </property>
    </bean>
    <!--</bean>-->
    <!--自定义shiro realm-->
    <!--直接注解实现realm接口的bean-->
    <bean id="jdbcRealm" class="org.example.demo.shiro.realm.ShiroRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
                <!--加密次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>

    <bean id="secondRealm" class="org.example.demo.shiro.realm.SecondRealm">
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"/>
                <!--加密次数-->
                <property name="hashIterations" value="1024"/>
            </bean>
        </property>
    </bean>

    <!-- =========================================================
         Shiro Spring-specific integration
         ========================================================= -->
    <!-- Post processor that automatically invokes init() and destroy() methods
         for Spring-configured Shiro objects so you don't have to
         1) specify an init-method and destroy-method attributes for every bean
            definition and
         2) even know which Shiro objects require these methods to be
            called. -->
    <!--生命周期LifecycleBeanPostProcessor，可以自动的调用Spring IOC容器中 shiro bean的生命周期方法-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after
         the lifecycleBeanProcessor has run: -->
    <!--启用ioc容器的shiro注解，必须配置lifecycleBeanPostProcessor之后才可以使用-->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor"/>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager"/>
    </bean>

    <!-- Secure Spring remoting:  Ensure any Spring Remoting method invocations can be associated
         with a Subject for security checks. -->
    <!--配置远程调用-->
    <!--<bean id="secureRemoteInvocationExecutor" class="org.apache.shiro.spring.remoting.SecureRemoteInvocationExecutor">-->
    <!--<property name="securityManager" ref="securityManager"/>-->
    <!--</bean>-->
    <!--退出登录-->
    <!--<bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">-->
    <!--<property name="redirectUrl" value="/views/login.jsp" />-->
    <!--</bean>-->
    <!-- Define the Shiro Filter here (as a FactoryBean) instead of directly in web.xml -
         web.xml uses the DelegatingFilterProxy to access this bean.  This allows us
         to wire things with more control as well utilize nice Spring things such as
         PropertiesPlaceholderConfigurer and abstract beans or anything else we might need: -->
    <!--配置shiroFilter-->
    <!--id必须和web.xml中配置的DelegatingFilterProxy的name一致-->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <property name="loginUrl" value="/login.jsp"/>
        <property name="successUrl" value="/list.jsp"/>
        <property name="unauthorizedUrl" value="/unauthorized.jsp"/>
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter bean
             defined will be automatically acquired and available via its beanName in chain
             definitions, but you can perform overrides or parent/child consolidated configuration
             here if you like: -->
        <!-- <property name="filters">
            <util:map>
                <entry key="aName" value-ref="someFilterPojo"/>
            </util:map>
        </property> -->
        <!--配置哪些页面需要受保护-->
        <!--以及这些页面需要的权限-->
        <!--anon 可以匿名访问-->
        <!--authc 必须认证之后访问-->
        <!--<property name="filterChainDefinitions">-->
            <!--<value>-->
                <!--/favicon.ico = anon-->
                <!--/shiro/login = anon-->
                <!--/user.jsp = roles[user]-->
                <!--/admin.jsp = roles[admin]-->
                <!--/shiro/logout = logout-->
                <!--# allow WebStart to pull the jars for the swing app:-->
                <!--/*.jar = anon-->
                <!--# everything else requires authentication:-->
                <!--/** = authc-->
            <!--</value>-->
        <!--</property>-->
    </bean>

    <bean name="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder" factory-method="buildFilterChainDefinitionMap"/>
    <bean name="filterChainDefinitionMapBuilder" class="org.example.demo.shiro.factory.FilterChainDefinitionMapBuilder"/>

    <bean name="shiroService" class="org.example.demo.service.impl.ShiroServiceImpl"/>
</beans>